
; tdm.pio
;
; Author: Johannes Regnier, adapted from Daniel Collins
; Date:   2024-05-05
;
; An tdm output peripheral with master clock (SCK) output.



.program tdm_out_master
; tdm audio output block. Synchronous with clock and input.
; Must run at BCK * CHANNELS.
;
; This block also outputs the frame clock and the bit clock.
; Uses 32 bits frames


.side_set 2 
             
;                                  /--- FRAMECLK
;                                  |/-- BCLK
;                                  ||
public entry_point: 
frameHigh:                  
    set x, 30               side 0b11
    out pins, 1             side 0b10
    set y, 3                side 0b11
dataHigh:                   
    out pins, 1             side 0b10
    jmp x-- dataHigh        side 0b11
    out pins, 1             side 0b10
    set x, 28               side 0b11
    out pins, 1             side 0b10
    jmp y-- dataHigh        side 0b11
    out pins, 1             side 0b10
frameLow:
    set x, 30               side 0b01
    out pins, 1             side 0b00
    set y, 3                side 0b01
dataLow:
    out pins, 1             side 0b00
    jmp x-- dataLow         side 0b01
    out pins, 1             side 0b00
    set x, 28               side 0b01
    out pins, 1             side 0b00
    jmp y-- dataLow         side 0b01
    out pins, 1             side 0b00    



% c-sdk {

// These constants are the tdm clock to pio clock ratio
const int tdm_sck_program_pio_mult = 2;
const int tdm_out_master_program_pio_mult = 2;



static inline void tdm_out_master_program_init(PIO pio, uint8_t sm, uint8_t offset, uint8_t bit_depth, uint8_t dout_pin, uint8_t clock_pin_base) {
    pio_gpio_init(pio, dout_pin);
    pio_gpio_init(pio, clock_pin_base);
    pio_gpio_init(pio, clock_pin_base + 1);

    pio_sm_config sm_config = tdm_out_master_program_get_default_config(offset);
    sm_config_set_out_pins(&sm_config, dout_pin, 1);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, false, true, bit_depth);  // activate autopull -- > true
    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &sm_config);

    uint32_t pin_mask = (1u << dout_pin) | (3u << clock_pin_base);
    pio_sm_set_pins_with_mask(pio, sm, 0, pin_mask);  // zero output
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
    
       
}



%}